# -*- coding: utf-8 -*-
"""DSCI_550_Final_Project_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10vw7eMfBjBhM1kiq1naTSx_QZ9InUEvp

# Importing Libraries
"""

import pandas as pd
import seaborn as sns
import os
from functools import reduce
import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima_model import ARIMA

"""# Updating Matplotlib Library"""

#if running into errors try uninstalling and reinstalling
!pip install matplotlib --upgrade

"""# Reading-in Datasets and Creating Dataframes 


"""

df2015 = pd.read_csv("2015.csv")
df2016 = pd.read_csv("2016.csv")
df2017 = pd.read_csv("2017.csv")
df2018 = pd.read_csv("2018.csv")
df2019 = pd.read_csv("2019.csv")
df2020 = pd.read_csv("2020.csv")
df2021 = pd.read_csv("2021.csv")
df2022 = pd.read_csv("2022.csv")

df2015
# potential variables of interest:

df2016

df2017

df2018

df2019

df2020

df2021

df2022

"""# Data Pre-processing"""

df2018["Country"] = df2018['Country or region']
df2019["Country"] = df2019['Country or region']
df2020["Happiness Rank"] = df2020['Ladder score'].rank(ascending=False).astype(int)
df2020["Country"] = df2020['Country name']
df2021["Happiness Rank"] = df2021['Ladder score'].rank(ascending=False).astype(int)
df2021["Country"] = df2021['Country name']
#converting df2022 columns to int, currently being read in as string because of commas
df2022[['Explained by: Freedom to make life choices', 'Happiness score', 'Whisker-high', 'Whisker-low', 'Dystopia (1.83) + residual', 'Explained by: GDP per capita', 'Explained by: Social support', 'Explained by: Healthy life expectancy', 'Explained by: Generosity', 'Explained by: Perceptions of corruption']].astype(str)
df2022['Explained by: Freedom to make life choices'] = df2022['Explained by: Freedom to make life choices'].str.replace(",", ".")
df2022['Happiness score'] = df2022['Happiness score'].str.replace(",", ".")
df2022['Whisker-high'] = df2022['Whisker-high'].str.replace(",", ".")
df2022['Whisker-low'] = df2022['Whisker-low'].str.replace(",", ".")
df2022['Dystopia (1.83) + residual'] = df2022['Dystopia (1.83) + residual'].str.replace(",", ".")
df2022['Explained by: GDP per capita'] = df2022['Explained by: GDP per capita'].str.replace(",", ".")
df2022['Explained by: Social support'] = df2022['Explained by: Social support'].str.replace(",", ".")
df2022['Explained by: Generosity'] = df2022['Explained by: Generosity'].str.replace(",", ".")
df2022['Explained by: Perceptions of corruption'] = df2022['Explained by: Perceptions of corruption'].str.replace(",", ".")
df2022['Explained by: Healthy life expectancy'] = df2022['Explained by: Healthy life expectancy'].str.replace(",", ".")
df2022 = df2022.astype({'Explained by: Freedom to make life choices': 'float', 'Happiness score': 'float', 'Whisker-high': 'float', 'Whisker-low': 'float', 'Dystopia (1.83) + residual': 'float', 'Explained by: GDP per capita': 'float', 'Explained by: Social support': 'float', 'Explained by: Generosity': 'float', 'Explained by: Perceptions of corruption': 'float', 'Explained by: Healthy life expectancy': 'float'})

df2017['Happiness Score'] = df2017['Happiness.Score']
df2018['Happiness Score'] = df2018['Score']
df2019['Happiness Score'] = df2019['Score']
df2020['Happiness Score'] = df2020['Ladder score']
df2021['Happiness Score'] = df2021['Ladder score']
df2022['Happiness Score'] = df2022['Happiness score']

df2015.dropna(inplace=True)
df2016.dropna(inplace=True)
df2017.dropna(inplace=True)
df2018.dropna(inplace=True)
df2019.dropna(inplace=True)
df2020.dropna(inplace=True)
df2021.dropna(inplace=True)
df2022.dropna(inplace=True)

#updating 2016 to be consistent with 2015
regions = df2015[['Country', 'Region']]
countries2016 = df2016['Country']
countries_list0 = []
get_region0 = []
dropped_countries0 = []
if 'Region' in df2016:
  df2016.drop('Region', axis = 1)

for i in countries2016:
  countries_list0.append(i)

for i in countries_list0:
  match = df2015.loc[df2015['Country'] == i]
  if len(match) == 0:
    dropped_countries0.append(i)

for country in dropped_countries0:
  idx = df2016.index[df2016['Country'] == country].tolist()
  df2016.drop(idx)


#creating region variable 2017
regions = df2015[['Country', 'Region']]
countries2017 = df2017['Country']
countries_list = []
if 'Region' in df2017:
  df2017.drop('Region', axis = 1)

for i in countries2017:
  countries_list.append(i)

get_region = []
dropped_countries = []
for i in countries_list:
  match = df2015.loc[df2015['Country'] == i]
  if len(match) == 0:
    dropped_countries.append(i)
  else:
    new_region = match['Region']
  for j in new_region:
    get_region.append(j)

for country in dropped_countries:
  idx = df2017.index[df2017['Country'] == country].tolist()
  df2017.drop(idx)

df2017['Region'] = get_region

#creating region variable 2018
countries2018 = df2018['Country or region']
countries_list2 = []
get_region2 = []
dropped_countries2 = []
if 'Region' in df2018:
  df2018.drop('Region', axis = 1)

for i in countries2018:
  countries_list2.append(i)


for i in countries_list2:
  match = df2015.loc[df2015['Country'] == i]
  if len(match) == 0:
    dropped_countries2.append(i)
  else:
    new_region = match['Region']
  for j in new_region:
    get_region2.append(j)

for country in dropped_countries2:
  idx = df2018.index[df2018['Country or region'] == country].tolist()
  df2018.drop(idx)

df2018['Region'] = get_region2

#creating region variable 2019
countries2019 = df2019['Country or region']
countries_list3 = []
get_region3 = []
dropped_countries3 = []
if 'Region' in df2019:
  df2019.drop('Region', axis = 1)

for i in countries2019:
  countries_list3.append(i)

for i in countries_list3:
  match = df2015.loc[df2015['Country'] == i]
  if len(match) == 0:
    dropped_countries3.append(i)
  else:
    new_region = match['Region']
  for j in new_region:
    get_region3.append(j)

for country in dropped_countries3:
  idx = df2019.index[df2019['Country or region'] == country].tolist()
  df2019.drop(idx)

df2019['Region'] = get_region3
df2019

#creating region variable 2020
countries2020 = df2020['Country']
countries_list4 = []
get_region4 = []
dropped_countries4 = []
if 'Region' in df2020:
  df2020.drop('Region', axis = 1)

for i in countries2020:
  countries_list4.append(i)

for i in countries_list4:
  match = df2015.loc[df2015['Country'] == i]
  if len(match) == 0:
    dropped_countries4.append(i)
  else:
    new_region = match['Region']
  for j in new_region:
    get_region4.append(j)

for country in dropped_countries4:
  idx = df2020.index[df2020['Country'] == country].tolist()
  df2020.drop(idx)

df2020['Region'] = get_region4
df2020

#creating region variable 2021
countries2021 = df2021['Country']
countries_list5 = []
get_region5 = []
dropped_countries5 = []
if 'Region' in df2021:
  df2021.drop('Region', axis = 1)

for i in countries2021:
  countries_list5.append(i)

for i in countries_list5:
  match = df2015.loc[df2015['Country'] == i]
  if len(match) == 0:
    dropped_countries5.append(i)
  else:
    new_region = match['Region']
  for j in new_region:
    get_region5.append(j)

for country in dropped_countries5:
  idx = df2021.index[df2021['Country'] == country].tolist()
  df2021.drop(idx)

df2021['Region'] = get_region5
df2021

#creating region variable 2022
countries2022 = df2022['Country']
countries_list6 = []
get_region6 = []
dropped_countries6 = []
if 'Region' in df2022:
  df2022.drop('Region', axis = 1)

for i in countries2022:
  countries_list6.append(i)

for i in countries_list6:
  match = df2015.loc[df2015['Country'] == i]
  if len(match) == 0:
    dropped_countries6.append(i)
  else:
    new_region = match['Region']
  for j in new_region:
    get_region6.append(j)

for country in dropped_countries6:
  idx = df2022.index[df2022['Country'] == country].tolist()
  df2022.drop(idx)

df2022['Region'] = get_region6
df2022

"""# Merging Dataframes"""

#new attmept at merging datasets
df_new = [df2015[['Country', 'Happiness Rank']], df2016[['Country', 'Happiness Rank']], df2017[['Country', 'Happiness.Rank']], df2018[['Country', 'Overall rank']], df2019[['Country', 'Overall rank']], df2020[['Country', 'Happiness Rank']], df2021[['Country', 'Happiness Rank']], df2022[['Country', 'RANK']]]
merged_new = reduce(lambda left, right: pd.merge(left, right, on=['Country']), df_new)
merged_new

merged_new.dropna(inplace=True)
merged_new

merged_new.columns=['Country', 'Happiness Rank 2015', 'Happiness Rank 2016', 'Happiness Rank 2017', 'Happiness Rank 2018', 'Happiness Rank 2019', 'Happiness Rank 2020', 'Happiness Rank 2021', 'Happiness Rank 2022']
columns = pd.Series(merged_new.columns)
for i in columns[columns.duplicated()].unique():
  columns[columns[columns == i].index.values.tolist()]
merged_new.columns=columns
merged_new

"""# Tracking Happiness Rank from 2015-2022"""

years = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]
fig, ax = plt.subplots(figsize=(50,50))
# ax.plot(all_merged['Country'], all_merged[['Happiness Rank 2015', 'Happiness Rank 2016', 'Happiness Rank 2017', 'Happiness Rank 2018', 'Happiness Rank 2019', 'Happiness Rank 2020', 'Happiness Rank 2021', 'Happiness Rank 2022']])
ax.plot(merged_new['Country'], merged_new['Happiness Rank 2015'], label = 'Happiness Rank 2015')
ax.plot(merged_new['Country'], merged_new['Happiness Rank 2016'], label = 'Happiness Rank 2016')
ax.plot(merged_new['Country'], merged_new['Happiness Rank 2017'], label = 'Happiness Rank 2017')
ax.plot(merged_new['Country'], merged_new['Happiness Rank 2018'], label = 'Happiness Rank 2018')
ax.plot(merged_new['Country'], merged_new['Happiness Rank 2019'], label = 'Happiness Rank 2019')
ax.plot(merged_new['Country'], merged_new['Happiness Rank 2020'], label = 'Happiness Rank 2020')
ax.plot(merged_new['Country'], merged_new['Happiness Rank 2021'], label = 'Happiness Rank 2021')
ax.plot(merged_new['Country'], merged_new['Happiness Rank 2022'], label = 'Happiness Rank 2022')
ax.set_title("Tracking Every Country's Happiness Rank (2015-2022)")
ax.set_xlabel("Countries")
ax.set_ylabel("Happiness Rank")
ax.tick_params(axis='x', labelrotation = 90)
ax.legend()

"""# Tracking Happiness Rank for Top 20 Countries from 2015-2022"""

years = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]
fig, ax = plt.subplots(figsize=(20,20))
top_twenty = merged_new[0:20]
# ax.plot(all_merged['Country'], all_merged[['Happiness Rank 2015', 'Happiness Rank 2016', 'Happiness Rank 2017', 'Happiness Rank 2018', 'Happiness Rank 2019', 'Happiness Rank 2020', 'Happiness Rank 2021', 'Happiness Rank 2022']])
ax.plot(top_twenty['Country'], top_twenty['Happiness Rank 2015'], label = 'Happiness Rank 2015')
ax.plot(top_twenty['Country'], top_twenty['Happiness Rank 2016'], label = 'Happiness Rank 2016')
ax.plot(top_twenty['Country'], top_twenty['Happiness Rank 2017'], label = 'Happiness Rank 2017')
ax.plot(top_twenty['Country'], top_twenty['Happiness Rank 2018'], label = 'Happiness Rank 2018')
ax.plot(top_twenty['Country'], top_twenty['Happiness Rank 2019'], label = 'Happiness Rank 2019')
ax.plot(top_twenty['Country'], top_twenty['Happiness Rank 2020'], label = 'Happiness Rank 2020')
ax.plot(top_twenty['Country'], top_twenty['Happiness Rank 2021'], label = 'Happiness Rank 2021')
ax.plot(top_twenty['Country'], top_twenty['Happiness Rank 2022'], label = 'Happiness Rank 2022')
ax.set_title("Tracking Every Country's Happiness Rank (2015-2022)")
ax.set_xlabel("Countries")
ax.set_ylabel("Happiness Rank")
ax.tick_params(axis='x', labelrotation = 90)
ax.legend()

"""# Top Twenty Happiest Countries (2015-2022)"""

top_twenty

"""# Bottom 20 Happiest Countries (2015-2022)"""

last_twenty = merged_new[-20:]
last_twenty
#127 to 158 is the ranking for bottom 20: anything above or below that is considered out of bottom 20

#did not use
df2015[['Country', 'Region', 'Happiness Rank']].sort_values("Happiness Rank", ascending=True).head(20) #20 happiest

#did not use
df2015[['Country', 'Region', 'Happiness Rank']].sort_values("Happiness Rank", ascending=True).tail(20)  #20 unhappiest

"""# Creating Pie Chart to Show Region Composition in Top 20 and Bottom 20 for Each Year"""

#making pie charts to illustrate composition
pie_num = df2015.head(20).groupby(['Region']).size()
pie_num2 = df2015.tail(20).groupby(['Region']).size()

get_labels = df2015['Region'].head(20).unique()
get_labels2 = df2015['Region'].tail(20).unique()

labels_list = []
labels_list2 = []

for i in get_labels:
  labels_list.append(i)

for i in get_labels2:
  labels_list2.append(i)

sorted_list = sorted(labels_list)
sorted_list2 = sorted(labels_list2)

plt.pie(pie_num, labels = sorted_list,autopct='%1.2f%%')

plt.title('2015 Top 20 Region Composition')
plt.show()
plt.title('2015 Bottom 20 Region Composition')
plt.pie(pie_num2, labels = sorted_list2,autopct='%1.2f%%')
plt.show()

#making pie charts to illustrate composition
pie_num3 = df2016.head(20).groupby(['Region']).size()
pie_num4 = df2016.tail(20).groupby(['Region']).size()

get_labels3 = df2016['Region'].head(20).unique()
get_labels4 = df2016['Region'].tail(20).unique()

labels_list3 = []
labels_list4 = []

for i in get_labels3:
  labels_list3.append(i)

for i in get_labels4:
  labels_list4.append(i)

sorted_list3 = sorted(labels_list3)
sorted_list4 = sorted(labels_list4)

plt.pie(pie_num3, labels = sorted_list3,autopct='%1.2f%%')
plt.title('2016 Top 20 Region Composition')
plt.show()

plt.title('2016 Bottom 20 Region Composition')
plt.pie(pie_num4, labels = sorted_list4,autopct='%1.2f%%')
plt.show()

#making pie charts to illustrate composition
pie_num5 = df2017.head(20).groupby(['Region']).size()
pie_num6 = df2017.tail(20).groupby(['Region']).size()

get_labels5 = df2017['Region'].head(20).unique()
get_labels6 = df2017['Region'].tail(20).unique()

labels_list5 = []
labels_list6 = []

for i in get_labels5:
  labels_list5.append(i)

for i in get_labels6:
  labels_list6.append(i)

sorted_list5 = sorted(labels_list5)
sorted_list6 = sorted(labels_list6)

plt.pie(pie_num5, labels = sorted_list5,autopct='%1.2f%%')
plt.title('2017 Top 20 Region Composition')
plt.show()

plt.title('2017 Bottom 20 Region Composition')
plt.pie(pie_num6, labels = sorted_list6,autopct='%1.2f%%')
plt.show()

#making pie charts to illustrate composition
pie_num7 = df2018.head(20).groupby(['Region']).size()
pie_num8 = df2018.tail(20).groupby(['Region']).size()

get_labels7 = df2018['Region'].head(20).unique()
get_labels8 = df2018['Region'].tail(20).unique()

labels_list7 = []
labels_list8 = []

for i in get_labels7:
  labels_list7.append(i)

for i in get_labels8:
  labels_list8.append(i)

sorted_list7 = sorted(labels_list7)
sorted_list8 = sorted(labels_list8)

plt.pie(pie_num7, labels = sorted_list7,autopct='%1.2f%%')
plt.title('2018 Top 20 Region Composition')
plt.show()

plt.title('2018 Bottom 20 Region Composition')
plt.pie(pie_num8, labels = sorted_list8,autopct='%1.2f%%')
plt.show()

#making pie charts to illustrate composition
pie_num9 = df2019.head(20).groupby(['Region']).size()
pie_num10 = df2019.tail(20).groupby(['Region']).size()

get_labels9 = df2019['Region'].head(20).unique()
get_labels10 = df2019['Region'].tail(20).unique()

labels_list9 = []
labels_list10 = []

for i in get_labels9:
  labels_list9.append(i)

for i in get_labels10:
  labels_list10.append(i)

sorted_list9 = sorted(labels_list9)
sorted_list10 = sorted(labels_list10)

plt.pie(pie_num9, labels = sorted_list9,autopct='%1.2f%%')
plt.title('2019 Top 20 Region Composition')
plt.show()

plt.title('2019 Bottom 20 Region Composition')
plt.pie(pie_num10, labels = sorted_list10,autopct='%1.2f%%')
plt.show()

#making pie charts to illustrate composition
pie_num11 = df2020.head(20).groupby(['Region']).size()
pie_num12 = df2020.tail(20).groupby(['Region']).size()

get_labels11 = df2020['Region'].head(20).unique()
get_labels12 = df2020['Region'].tail(20).unique()

labels_list11 = []
labels_list12 = []

for i in get_labels11:
  labels_list11.append(i)

for i in get_labels12:
  labels_list12.append(i)

sorted_list11 = sorted(labels_list11)
sorted_list12 = sorted(labels_list12)

plt.pie(pie_num11, labels = sorted_list11,autopct='%1.2f%%')
plt.title('2020 Top 20 Region Composition')
plt.show()

plt.title('2020 Bottom 20 Region Composition')
plt.pie(pie_num12, labels = sorted_list12,autopct='%1.2f%%')
plt.show()

#making pie charts to illustrate composition
pie_num13 = df2021.head(20).groupby(['Region']).size()
pie_num14 = df2021.tail(20).groupby(['Region']).size()

get_labels13 = df2021['Region'].head(20).unique()
get_labels14 = df2021['Region'].tail(20).unique()

labels_list13 = []
labels_list14 = []

for i in get_labels13:
  labels_list13.append(i)

for i in get_labels14:
  labels_list14.append(i)

sorted_list13 = sorted(labels_list13)
sorted_list14 = sorted(labels_list14)

plt.pie(pie_num13, labels = sorted_list13,autopct='%1.2f%%')
plt.title('2021 Top 20 Region Composition')
plt.show()

plt.title('2021 Bottom 20 Region Composition')
plt.pie(pie_num14, labels = sorted_list14,autopct='%1.2f%%')
plt.show()

#making pie charts to illustrate composition
pie_num15 = df2022.head(20).groupby(['Region']).size()
pie_num16 = df2022.tail(20).groupby(['Region']).size()

get_labels15 = df2022['Region'].head(20).unique()
get_labels16 = df2022['Region'].tail(20).unique()

labels_list15 = []
labels_list16 = []

for i in get_labels15:
  labels_list15.append(i)

for i in get_labels16:
  labels_list16.append(i)

sorted_list15 = sorted(labels_list15)
sorted_list16 = sorted(labels_list16)

plt.pie(pie_num15, labels = sorted_list15,autopct='%1.2f%%')
plt.title('2022 Top 20 Region Composition')
plt.show()

plt.title('2022 Bottom 20 Region Composition')
plt.pie(pie_num16, labels = sorted_list16,autopct='%1.2f%%')
plt.show()

"""# Creating a Stacked Bar Graph to Show Each Happiness Score's Composition for Each Year

"""

#Did not use
fig, ax = plt.subplots(figsize=(50,20))
stacked = df2015
stacked_country = stacked['Country']
stacked_economy = stacked['Economy (GDP per Capita)']
stacked_family = stacked['Family']
stacked_health = stacked['Health (Life Expectancy)']
stacked_trust = stacked['Trust (Government Corruption)']
stacked_generosity = stacked['Generosity']
w = 0.6
ax.bar(stacked_country, stacked_economy, w, label="Economy GDP per Capita")
ax.bar(stacked_country, stacked_family, w, bottom = stacked_economy, label="Family")
ax.bar(stacked_country, stacked_health, w, bottom = (stacked_economy + stacked_family), label = "Health (Life Expectancy)")
ax.bar(stacked_country, stacked_trust, w, bottom =((stacked_economy + stacked_family) + stacked_health), label = "Trust (Government Corruption)")
ax.bar(stacked_country, stacked_generosity, w, bottom = (stacked_economy + stacked_family) + (stacked_health + stacked_trust), label = "Generosity")
ax.set_title("Breakdown of Every Country's Variables of Interest (2015)")
ax.set_xlabel("Countries")
ax.set_ylabel("Cummulative Score of Focus Variables")
ax.tick_params(axis='x', labelrotation = 90)
ax.legend()

# Used
fig, ax = plt.subplots(figsize=(10,10))
df_three2015 = df2015.iloc[[150, 13, 133, 22]]

stacked = df_three2015
stacked_country = stacked['Country']
stacked_dystopia = stacked['Dystopia Residual']
stacked_economy = stacked['Economy (GDP per Capita)']
stacked_family = stacked['Family']
stacked_health = stacked['Health (Life Expectancy)']
stacked_freedom = stacked['Freedom']
stacked_trust = stacked['Trust (Government Corruption)']
stacked_generosity = stacked['Generosity']

p1 = ax.bar(stacked_country, stacked_economy, label="Economy GDP per Capita")
p2 = ax.bar(stacked_country, stacked_family, bottom = stacked_economy, label="Family/Social Support")
p3 = ax.bar(stacked_country, stacked_health, bottom = (stacked_economy + stacked_family), label = "Health (Life Expectancy)")
p4 = ax.bar(stacked_country, stacked_trust, bottom =((stacked_economy + stacked_family) + stacked_health), label = "Trust (Government Corruption)")
p5 = ax.bar(stacked_country, stacked_generosity, bottom = (stacked_economy + stacked_family) + (stacked_health + stacked_trust), label = "Generosity")
p6 = ax.bar(stacked_country, stacked_dystopia, bottom = (stacked_economy + stacked_family) + (stacked_health + stacked_trust) + stacked_generosity, label = "Dystopia Residual")
p7 = ax.bar(stacked_country, stacked_freedom, bottom = (stacked_economy + stacked_family) + (stacked_health + stacked_trust) + (stacked_generosity + stacked_dystopia), label = "Freedom")

ax.bar_label(p1, label_type = 'center')
ax.bar_label(p2, label_type = 'center')
ax.bar_label(p3, label_type = 'center')
ax.bar_label(p4, label_type = 'center')
ax.bar_label(p5, label_type = 'center')
ax.bar_label(p6, label_type = 'center')
ax.bar_label(p7, label_type = 'center')

ax.set_title("Breakdown of Happiness Scores (2015)")
ax.set_xlabel("Countries")
ax.set_ylabel("Happiness Score")
ax.tick_params(axis='x', labelrotation = 90)
ax.legend(prop=dict(size=10), bbox_to_anchor=(1.0, 1.0))

# Used
fig, ax = plt.subplots(figsize=(10,10))
df_three2022 = df2022.iloc[[87, 45, 84, 107]]
stacked2 = df_three2022
stacked_country2 = stacked2['Country']
stacked_dystopia2 = stacked2['Dystopia (1.83) + residual']
stacked_economy2 = stacked2['Explained by: GDP per capita']
stacked_family2 = stacked2['Explained by: Social support']
stacked_freedom2 = stacked2['Explained by: Freedom to make life choices']
stacked_health2 = stacked2['Explained by: Healthy life expectancy']
stacked_trust2 = stacked2['Explained by: Perceptions of corruption']
stacked_generosity2 = stacked2['Explained by: Generosity']

p1 = ax.bar(stacked_country2, stacked_economy2, label="Economy GDP per Capita")
p2 = ax.bar(stacked_country2, stacked_family2, bottom = stacked_economy2, label="Family/Social Support")
p3 = ax.bar(stacked_country2, stacked_health2, bottom = (stacked_economy2 + stacked_family2), label = "Health (Life Expectancy)")
p4 = ax.bar(stacked_country2, stacked_trust2, bottom =((stacked_economy2 + stacked_family2) + stacked_health2), label = "Trust (Government Corruption)")
p5 = ax.bar(stacked_country2, stacked_generosity2, bottom = (stacked_economy2 + stacked_family2) + (stacked_health2 + stacked_trust2), label = "Generosity")
p6 = ax.bar(stacked_country2, stacked_dystopia2, bottom = (stacked_economy2 + stacked_family2) + (stacked_health2 + stacked_trust2) + stacked_generosity2, label = "Dystopia Residual")
p7 = ax.bar(stacked_country2, stacked_freedom2, bottom = (stacked_economy2 + stacked_family2) + (stacked_health2 + stacked_trust2) + (stacked_generosity2 + stacked_dystopia2), label = "Freedom")

ax.bar_label(p1, label_type = 'center')
ax.bar_label(p2, label_type = 'center')
ax.bar_label(p3, label_type = 'center')
ax.bar_label(p4, label_type = 'center')
ax.bar_label(p5, label_type = 'center')
ax.bar_label(p6, label_type = 'center')
ax.bar_label(p7, label_type = 'center')
# ax.bar_label(stacked2['Happiness Score'], label_type = 'edge')
ax.set_title("Breakdown of Happiness Scores (2022)")
ax.set_xlabel("Countries")
ax.set_ylabel("Happiness Score")
ax.tick_params(axis='x', labelrotation = 90)
ax.legend(prop=dict(size=10), bbox_to_anchor=(1.0, 1.0))

"""# Histograms"""

# Did not use
merging_all = pd.concat([df2015, df2016, df2017, df2018, df2019, df2020, df2021, df2022])
grouped_all = merging_all[['Country', 'Region', 'Happiness Score']].groupby('Region').sum()
# df2015[['Country', 'Region', 'Happiness Score']].groupby('Region').sum()
grouped_all.plot(kind='bar')
plt.title("Overall Happiness Scores Grouped By Region (2015-2022)")
plt.xlabel("Regions")
plt.ylabel("Combined Happiness Scores")
plt.xticks(rotation = 90)
plt.show()
# df_all = [df2015[['Region', 'Happiness Score']], df2016[['Region', 'Happiness Score']], df2017[['Region', 'Happiness Score']], df2018[['Region', 'Happiness Score']], df2019[['Region', 'Happiness Score']], df2020[['Region', 'Happiness Score']], df2021[['Region', 'Happiness Score']], df2022[['Region', 'Happiness Score']]]
# merging_all = reduce(lambda left, right: pd.merge(left, right, on=['Region']), df_all)
# merging_all

# Used
plt.figure(figsize=(50, 50))
grouped_2015 = df2015[['Region', 'Economy (GDP per Capita)', 'Health (Life Expectancy)', 'Dystopia Residual']].groupby('Region').sum()
grouped_2016 = df2016[['Region', 'Economy (GDP per Capita)', 'Health (Life Expectancy)', 'Dystopia Residual']].groupby('Region').sum()
grouped_2017 = df2017[['Region', 'Economy..GDP.per.Capita.', 'Health..Life.Expectancy.', 'Dystopia.Residual']].groupby('Region').sum()
#2018-2021 omitted because did not have Dystopia Residual variable
grouped_2022 = df2022[['Region', 'Explained by: GDP per capita', 'Explained by: Healthy life expectancy', 'Dystopia (1.83) + residual']].groupby('Region').sum()

new_plot_gdp = grouped_2015.plot(kind='bar')
plt.title("2015 Happiness Scores Grouped By Region (GDP per Capita)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2015")
plt.bar_label(new_plot_gdp.containers[0], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_health = grouped_2015.plot(kind='bar')
plt.title("2015 Happiness Scores Grouped By Region (Health)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2015")
plt.bar_label(new_plot_health.containers[1], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_dys = grouped_2015.plot(kind='bar')
plt.title("2015 Happiness Scores Grouped By Region (Dystopia Residual)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2015")
plt.bar_label(new_plot_dys.containers[2], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_gdp2 = grouped_2016.plot(kind='bar')
plt.title("2016 Happiness Scores Grouped By Region (GDP per Capita)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2016")
plt.bar_label(new_plot_gdp2.containers[0], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_health2 = grouped_2016.plot(kind='bar')
plt.title("2016 Happiness Scores Grouped By Region (Health)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2016")
plt.bar_label(new_plot_health2.containers[1], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_dys2 = grouped_2016.plot(kind='bar')
plt.title("2016 Happiness Scores Grouped By Region (Dystopia Residual)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2016")
plt.bar_label(new_plot_dys2.containers[2], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_gdp3 = grouped_2017.plot(kind='bar')
plt.title("2017 Happiness Scores Grouped By Region (GDP per Capita)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2017")
plt.bar_label(new_plot_gdp3.containers[0], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_health3 = grouped_2017.plot(kind='bar')
plt.title("2017 Happiness Scores Grouped By Region (Health)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2017")
plt.bar_label(new_plot_health3.containers[1], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_dys3 = grouped_2017.plot(kind='bar')
plt.title("2017 Happiness Scores Grouped By Region (Dystopia Residual)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2017")
plt.bar_label(new_plot_dys3.containers[2], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_gdp4 = grouped_2022.plot(kind='bar')
plt.title("2022 Happiness Scores Grouped By Region (GDP per Capita)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2022")
plt.bar_label(new_plot_gdp4.containers[0], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_health4 = grouped_2022.plot(kind='bar')
plt.title("2022 Happiness Scores Grouped By Region (Health)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2022")
plt.bar_label(new_plot_health4.containers[1], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

new_plot_dys4 = grouped_2022.plot(kind='bar')
plt.title("2022 Happiness Scores Grouped By Region (Dystopia Residual)")
plt.xlabel("Regions")
plt.ylabel("Happiness Scores 2022")
plt.bar_label(new_plot_dys4.containers[2], size = 10)
plt.xticks(rotation = 90)
plt.legend(loc='best', fontsize = 10, bbox_to_anchor=(1.0, 1.0))
plt.show()

"""# Testing (Ignore)"""

#creating box and whisker plots based on country's rank (univariate analysis)
merged_new[['Happiness Rank 2015', 'Happiness Rank 2016', 'Happiness Rank 2017', 'Happiness Rank 2018', 'Happiness Rank 2019', 'Happiness Rank 2020', 'Happiness Rank 2021', 'Happiness Rank 2022']].plot(kind='box', title='Ranking Distribution', figsize=(10,10))
plt.xticks(rotation = 45)
plt.show()

#bi-variate analysis (scatter plot)
df2022['Explained by: Freedom to make life choices'] = df2022['Explained by: Freedom to make life choices'].div(1000)
df2015.plot(kind='scatter', x = 'Happiness Rank', y='Freedom', color='black')
df2016.plot(kind='scatter', x = 'Happiness Rank', y='Freedom', color='green')
df2017.plot(kind='scatter', x = 'Happiness.Rank', y='Freedom', color='purple')
df2018.plot(kind= 'scatter', x = 'Overall rank', y='Freedom to make life choices', color = 'red')
df2019.plot(kind= 'scatter', x = 'Overall rank', y='Freedom to make life choices', color = 'yellow')
df2020.plot(kind= 'scatter', x = 'Happiness Rank', y='Freedom to make life choices', color = 'blue')
df2021.plot(kind= 'scatter', x = 'Happiness Rank', y='Freedom to make life choices', color = 'orange')
df2022.plot(kind= 'scatter', x = 'RANK', y='Explained by: Freedom to make life choices', color = 'gray')
plt.show()

"""# **Time Series Forecasting**

## Time series forecasting for Finland:

First adding year column for each dataframe.
"""

df2015['Year']=2015
df2016['Year']=2016
df2017['Year']=2017
df2018['Year']=2018
df2019['Year']=2019
df2020['Year']=2020
df2021['Year']=2021
df2022['Year']=2022

"""Filter the specific countries we want to make prediction on. Select variables of interest for times series analysis: happiness score and year. """

df2015_new=df2015[df2015['Country']=='Finland']
df2015_new=df2015_new[['Happiness Score','Year']]

df2016_new=df2016[df2016['Country']=='Finland']
df2016_new=df2016_new[['Happiness Score','Year']]
df2016_new

df2017_new=df2017[df2017['Country']=='Finland']
df2017_new=df2017_new[['Happiness.Score','Year']]
df2017_new=df2017_new.rename(columns={'Happiness.Score':'Happiness Score'})
df2017_new

df2018_new=df2018[df2018['Country']=='Finland']
df2018_new=df2018_new[['Score','Year']]
df2018_new=df2018_new.rename(columns={'Score':'Happiness Score'})
df2018_new

df2019_new=df2019[df2019['Country']=='Finland']
df2019_new=df2019_new[['Score','Year']]
df2019_new=df2019_new.rename(columns={'Score':'Happiness Score'})

df2020_new=df2020[df2020['Country']=='Finland']
df2020_new=df2020_new[['Ladder score','Year']]
df2020_new=df2020_new.rename(columns={'Ladder score':'Happiness Score'})

df2021_new=df2021[df2021['Country']=='Finland']
df2021_new=df2021_new[['Ladder score','Year']]
df2021_new=df2021_new.rename(columns={'Ladder score':'Happiness Score'})

df2022_new=df2022[df2022['Country']=='Finland']
df2022_new=df2022_new[['Happiness score','Year']]
df2022_new=df2022_new.rename(columns={'Happiness score':'Happiness Score'})

frames=[df2015_new, df2016_new, df2017_new, df2018_new, df2019_new, df2020_new, df2021_new, df2022_new]
df=pd.concat(frames)
df=df.reset_index(drop=True)
df['Happiness Score']=pd.to_numeric(df['Happiness Score'])
df['Year']=pd.to_datetime(df['Year'], format='%Y')
df.set_index('Year')['Happiness Score'].plot()
plt.title('Time Series Graph for Finland')
plt.ylabel('Happpiness Score')
df

df['Happiness Score']

"""Perform differencing:"""

figure, axis = plt.subplots(3, 3)
plt.subplots_adjust(hspace=1)

axis[0, 0].plot(df['Happiness Score'])
axis[0, 0].set_title('original')
plot_acf(df['Happiness Score'], ax=axis[0,1])
plot_pacf(df['Happiness Score'], lags=3, ax=axis[0,2])

axis[1, 0].plot(df['Happiness Score'].diff())
axis[1, 0].set_title('plot of 1st difference')
plot_acf(df['Happiness Score'].diff().dropna(), ax=axis[1,1])
plot_pacf(df['Happiness Score'].diff(),lags=3,ax=axis[1,2])

axis[2, 0].plot(df['Happiness Score'].diff().diff())
axis[2, 0].set_title('plot of 2nd difference')
plot_acf(df['Happiness Score'].diff().diff().dropna(), ax=axis[2,1])
plot_pacf(df['Happiness Score'].diff().diff(),lags=3, ax=axis[1,2])

#axis[3, 0].plot(df['Happiness Score'].diff().diff().diff())
#axis[3, 0].set_title('3rd differenced')
#plot_acf(df['Happiness Score'].diff().diff().diff().dropna(), ax=axis[1,1])

plt.show()

"""Model fitting:"""

model1 = ARIMA(df['Happiness Score'], order=(0,2,1))
print(model1.fit().summary())
model1.fit().forecast(1, alpha=0.05)

model2 = ARIMA(df['Happiness Score'], order=(0,0,1))
print(model2.fit().summary())
model2.fit().forecast(1, alpha=0.05)

"""## Time series forecasting for Denmark:"""

df2015_new1=df2015[df2015['Country']=='Denmark']
df2015_new1=df2015_new1[['Happiness Score','Year']]

df2016_new1=df2016[df2016['Country']=='Denmark']
df2016_new1=df2016_new1[['Happiness Score','Year']]
df2016_new1

df2017_new1=df2017[df2017['Country']=='Denmark']
df2017_new1=df2017_new1[['Happiness.Score','Year']]
df2017_new1=df2017_new1.rename(columns={'Happiness.Score':'Happiness Score'})
df2017_new1

df2018_new1=df2018[df2018['Country']=='Denmark']
df2018_new1=df2018_new1[['Score','Year']]
df2018_new1=df2018_new1.rename(columns={'Score':'Happiness Score'})
df2018_new1

df2019_new1=df2019[df2019['Country']=='Denmark']
df2019_new1=df2019_new1[['Score','Year']]
df2019_new1=df2019_new1.rename(columns={'Score':'Happiness Score'})

df2020_new1=df2020[df2020['Country']=='Denmark']
df2020_new1=df2020_new1[['Ladder score','Year']]
df2020_new1=df2020_new1.rename(columns={'Ladder score':'Happiness Score'})

df2021_new1=df2021[df2021['Country']=='Denmark']
df2021_new1=df2021_new1[['Ladder score','Year']]
df2021_new1=df2021_new1.rename(columns={'Ladder score':'Happiness Score'})

df2022_new1=df2022[df2022['Country']=='Denmark']
df2022_new1=df2022_new1[['Happiness score','Year']]
df2022_new1=df2022_new1.rename(columns={'Happiness score':'Happiness Score'})

frames1=[df2015_new1, df2016_new1, df2017_new1, df2018_new1, df2019_new1, df2020_new1, df2021_new1, df2022_new1]
df1=pd.concat(frames1)
df1=df1.reset_index(drop=True)
df1['Happiness Score']=pd.to_numeric(df1['Happiness Score'])
df1['Year']=pd.to_datetime(df1['Year'], format='%Y')
df1.set_index('Year')['Happiness Score'].plot()
plt.title('Time Series Graph for Denmark')
plt.ylabel('Happpiness Score')
df1

figure, axis = plt.subplots(3, 3)
plt.subplots_adjust(hspace=1)

axis[0, 0].plot(df1['Happiness Score'])
axis[0, 0].set_title('original')
plot_acf(df1['Happiness Score'], ax=axis[0,1])
plot_pacf(df1['Happiness Score'], lags=3, ax=axis[0,2])

axis[1, 0].plot(df1['Happiness Score'].diff())
axis[1, 0].set_title('plot of 1st difference')
plot_acf(df1['Happiness Score'].diff().dropna(), ax=axis[1,1])
plot_pacf(df1['Happiness Score'].diff(),lags=3,ax=axis[1,2])

axis[2, 0].plot(df1['Happiness Score'].diff().diff())
axis[2, 0].set_title('plot of 2nd difference')
plot_acf(df1['Happiness Score'].diff().diff().dropna(), ax=axis[2,1])
plot_pacf(df1['Happiness Score'].diff().diff(),lags=3, ax=axis[1,2])

#axis[3, 0].plot(df['Happiness Score'].diff().diff().diff())
#axis[3, 0].set_title('3rd differenced')
#plot_acf(df['Happiness Score'].diff().diff().diff().dropna(), ax=axis[1,1])

plt.show()

model3 = ARIMA(df1['Happiness Score'], order=(0,1,1))
print(model3.fit().summary())
model3.fit().forecast(1, alpha=0.05)

model4 = ARIMA(df1['Happiness Score'], order=(0,0,1))
print(model4.fit().summary())
model4.fit().forecast(1, alpha=0.05)

"""## Time series forecasting of Ivory Coast:"""

df2015_new2=df2015[df2015['Country']=='Ivory Coast']
df2015_new2=df2015_new2[['Happiness Score','Year']]

df2016_new2=df2016[df2016['Country']=='Ivory Coast']
df2016_new2=df2016_new2[['Happiness Score','Year']]
df2016_new2

df2017_new2=df2017[df2017['Country']=='Ivory Coast']
df2017_new2=df2017_new2[['Happiness.Score','Year']]
df2017_new2=df2017_new2.rename(columns={'Happiness.Score':'Happiness Score'})
df2017_new2

df2018_new2=df2018[df2018['Country']=='Ivory Coast']
df2018_new2=df2018_new2[['Score','Year']]
df2018_new2=df2018_new2.rename(columns={'Score':'Happiness Score'})
df2018_new2

df2019_new2=df2019[df2019['Country']=='Ivory Coast']
df2019_new2=df2019_new2[['Score','Year']]
df2019_new2=df2019_new2.rename(columns={'Score':'Happiness Score'})

df2020_new2=df2020[df2020['Country']=='Ivory Coast']
df2020_new2=df2020_new2[['Ladder score','Year']]
df2020_new2=df2020_new2.rename(columns={'Ladder score':'Happiness Score'})

df2021_new2=df2021[df2021['Country']=='Ivory Coast']
df2021_new2=df2021_new2[['Ladder score','Year']]
df2021_new2=df2021_new2.rename(columns={'Ladder score':'Happiness Score'})

df2022_new2=df2022[df2022['Country']=='Ivory Coast']
df2022_new2=df2022_new2[['Happiness score','Year']]
df2022_new2=df2022_new2.rename(columns={'Happiness score':'Happiness Score'})

frames2=[df2015_new2, df2016_new2, df2017_new2, df2018_new2, df2019_new2, df2020_new2, df2021_new2, df2022_new2]
df2=pd.concat(frames2)
df2=df2.reset_index(drop=True)
df2['Happiness Score']=pd.to_numeric(df2['Happiness Score'])
df2['Year']=pd.to_datetime(df2['Year'], format='%Y')
df2.set_index('Year')['Happiness Score'].plot()
plt.title('Time Series Graph for Denmark')
plt.ylabel('Happpiness Score')
df2

figure, axis = plt.subplots(3, 3)
plt.subplots_adjust(hspace=1)

axis[0, 0].plot(df2['Happiness Score'])
axis[0, 0].set_title('original')
plot_acf(df2['Happiness Score'], ax=axis[0,1])
plot_pacf(df2['Happiness Score'], lags=3, ax=axis[0,2])

axis[1, 0].plot(df2['Happiness Score'].diff())
axis[1, 0].set_title('plot of 1st difference')
plot_acf(df2['Happiness Score'].diff().dropna(), ax=axis[1,1])
plot_pacf(df2['Happiness Score'].diff(),lags=3,ax=axis[1,2])

axis[2, 0].plot(df2['Happiness Score'].diff().diff())
axis[2, 0].set_title('plot of 2nd difference')
plot_acf(df2['Happiness Score'].diff().diff().dropna(), ax=axis[2,1])
plot_pacf(df2['Happiness Score'].diff().diff(),lags=3, ax=axis[1,2])

#axis[3, 0].plot(df['Happiness Score'].diff().diff().diff())
#axis[3, 0].set_title('3rd differenced')
#plot_acf(df['Happiness Score'].diff().diff().diff().dropna(), ax=axis[1,1])

plt.show()

model5 = ARIMA(df2['Happiness Score'], order=(0,2,1))
print(model5.fit().summary())
model5.fit().forecast(1, alpha=0.05)

model6 = ARIMA(df2['Happiness Score'], order=(0,0,2))
print(model6.fit().summary())
model6.fit().forecast(1, alpha=0.05)

"""## Time Series Forecasting of Mexico:"""

df2015_new3=df2015[df2015['Country']=='Mexico']
df2015_new3=df2015_new3[['Happiness Score','Year']]

df2016_new3=df2016[df2016['Country']=='Mexico']
df2016_new3=df2016_new3[['Happiness Score','Year']]
df2016_new3

df2017_new3=df2017[df2017['Country']=='Mexico']
df2017_new3=df2017_new3[['Happiness.Score','Year']]
df2017_new3=df2017_new3.rename(columns={'Happiness.Score':'Happiness Score'})
df2017_new3

df2018_new3=df2018[df2018['Country']=='Mexico']
df2018_new3=df2018_new3[['Score','Year']]
df2018_new3=df2018_new3.rename(columns={'Score':'Happiness Score'})
df2018_new3

df2019_new3=df2019[df2019['Country']=='Mexico']
df2019_new3=df2019_new3[['Score','Year']]
df2019_new3=df2019_new3.rename(columns={'Score':'Happiness Score'})

df2020_new3=df2020[df2020['Country']=='Mexico']
df2020_new3=df2020_new3[['Ladder score','Year']]
df2020_new3=df2020_new3.rename(columns={'Ladder score':'Happiness Score'})

df2021_new3=df2021[df2021['Country']=='Mexico']
df2021_new3=df2021_new3[['Ladder score','Year']]
df2021_new3=df2021_new3.rename(columns={'Ladder score':'Happiness Score'})

df2022_new3=df2022[df2022['Country']=='Mexico']
df2022_new3=df2022_new3[['Happiness score','Year']]
df2022_new3=df2022_new3.rename(columns={'Happiness score':'Happiness Score'})

frames3=[df2015_new3, df2016_new3, df2017_new3, df2018_new3, df2019_new3, df2020_new3, df2021_new3, df2022_new3]
df3=pd.concat(frames3)
df3=df3.reset_index(drop=True)
df3['Happiness Score']=pd.to_numeric(df3['Happiness Score'])
df3['Year']=pd.to_datetime(df3['Year'], format='%Y')
df3.set_index('Year')['Happiness Score'].plot()
plt.title('Time Series Graph for Denmark')
plt.ylabel('Happpiness Score')
df3

figure, axis = plt.subplots(3, 3)
plt.subplots_adjust(hspace=1)

axis[0, 0].plot(df3['Happiness Score'])
axis[0, 0].set_title('original')
plot_acf(df3['Happiness Score'], ax=axis[0,1])
plot_pacf(df3['Happiness Score'], lags=3, ax=axis[0,2])

axis[1, 0].plot(df3['Happiness Score'].diff())
axis[1, 0].set_title('plot of 1st difference')
plot_acf(df3['Happiness Score'].diff().dropna(), ax=axis[1,1])
plot_pacf(df3['Happiness Score'].diff(),lags=3,ax=axis[1,2])

axis[2, 0].plot(df3['Happiness Score'].diff().diff())
axis[2, 0].set_title('plot of 2nd difference')
plot_acf(df3['Happiness Score'].diff().diff().dropna(), ax=axis[2,1])
plot_pacf(df3['Happiness Score'].diff().diff(),lags=3, ax=axis[1,2])

#axis[3, 0].plot(df['Happiness Score'].diff().diff().diff())
#axis[3, 0].set_title('3rd differenced')
#plot_acf(df['Happiness Score'].diff().diff().diff().dropna(), ax=axis[1,1])

plt.show()

model7 = ARIMA(df3['Happiness Score'], order=(0,0,1))
print(model7.fit().summary())
model7.fit().forecast(1, alpha=0.05)

model8 = ARIMA(df3['Happiness Score'], order=(0,0,2))
print(model8.fit().summary())
model8.fit().forecast(1, alpha=0.05)

"""# **Clustering - TSNE**"""

#2015 clustered data
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2015.iloc[:,5:12])
df_subset = df2015
#df2015.iloc[:,5:12]
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl = sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Happiness Rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Happiness Rank'].between(21,138)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2015 data')
data = df_subset[~df_subset['Happiness Rank'].between(21,138)]
for I,row in data.iterrows():
     pl.text(row["tsne-2d-one"]+0.2, row["tsne-2d-two"],row["Country"], horizontalalignment='left', 
     size='medium', color='black', weight='semibold')
pl

#2015 clustered data no label
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2015.iloc[:,5:12])
df_subset = df2015
#df2015.iloc[:,5:12]
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl = sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Happiness Rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Happiness Rank'].between(21,138)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2015 data')
pl

#2016 clustered data
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2016.iloc[:,6:13])
df_subset = df2016
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl=sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Happiness Rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Happiness Rank'].between(21,138)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2016 data')
data = df_subset[~df_subset['Happiness Rank'].between(21,138)]
for I,row in data.iterrows():
     pl.text(row["tsne-2d-one"]+0.2, row["tsne-2d-two"],row["Country"], horizontalalignment='left', 
     size='medium', color='black', weight='semibold')
pl

#2016 clustered data no label
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2016.iloc[:,6:13])
df_subset = df2016
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl=sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Happiness Rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Happiness Rank'].between(21,138)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2016 data')
pl

#2017 clustered data
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2017.iloc[:,5:12])
df_subset = df2017
#df2016.iloc[:,5:12]
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Happiness.Rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Happiness.Rank'].between(21,135)]
    #legend="full",
    #alpha=0.3
).set(title='2017 data')

#2017 clustered data labeled
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2017.iloc[:,5:12])
df_subset = df2017
#df2016.iloc[:,5:12]
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl=sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Happiness.Rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Happiness.Rank'].between(21,135)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2017 data')
data = df_subset[~df_subset['Happiness.Rank'].between(21,135)]
for I,row in data.iterrows():
     pl.text(row["tsne-2d-one"]+0.2, row["tsne-2d-two"],row["Country"], horizontalalignment='left', 
     size='medium', color='black', weight='semibold')
pl

#2018 clustered data
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2018.iloc[:,3:9].dropna())
df_subset = df2018.dropna()
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Overall rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Overall rank'].between(21,136)]
    #legend="full",
    #alpha=0.3
).set(title='2018 data')

#2018 clustered data labeled
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2018.iloc[:,3:9].dropna())
df_subset = df2018.dropna()
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl = sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Overall rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Overall rank'].between(21,136)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2018 data')
data = df_subset[~df_subset['Overall rank'].between(21,136)]
for I,row in data.iterrows():
     pl.text(row["tsne-2d-one"]+0.2, row["tsne-2d-two"],row["Country or region"], horizontalalignment='left', 
     size='medium', color='black', weight='semibold')
pl

#2019 clustered data
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2019.iloc[:,3:9].dropna())
df_subset = df2019.dropna()
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Overall rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Overall rank'].between(21,136)]
    #legend="full",
    #alpha=0.3
).set(title='2019 data')

#2019 clustered data labeled
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2019.iloc[:,3:9].dropna())
df_subset = df2019.dropna()
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl = sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Overall rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Overall rank'].between(21,136)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2019 data')
data = df_subset[~df_subset['Overall rank'].between(21,136)]
for I,row in data.iterrows():
     pl.text(row["tsne-2d-one"]+0.2, row["tsne-2d-two"],row["Country or region"], horizontalalignment='left', 
     size='medium', color='black', weight='semibold')
pl

#2020 clustered data
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2020.iloc[:,6:13].dropna())
df_subset = df2020.dropna()
df_subset["Overall rank"]= range(1,len(df_subset)+1)
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Overall rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Overall rank'].between(21,133)]
    #legend="full",
    #alpha=0.3
).set(title='2020 data')

#2020 clustered data labeled
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2020.iloc[:,6:13].dropna())
df_subset = df2020.dropna()
df_subset["Overall rank"]= range(1,len(df_subset)+1)
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl = sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Overall rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Overall rank'].between(21,133)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2020 data')
data = df_subset[~df_subset['Overall rank'].between(21,133)]
for I,row in data.iterrows():
     pl.text(row["tsne-2d-one"]+0.2, row["tsne-2d-two"],row["Country name"], horizontalalignment='left', 
     size='medium', color='black', weight='semibold')
pl

#2021 clustered data
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2021.iloc[:,6:13].dropna())
df_subset = df2021.dropna()
df_subset["Overall rank"]= range(1,len(df_subset)+1)
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Overall rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Overall rank'].between(21,129)]
    #legend="full",
    #alpha=0.3
).set(title='2021 data')

#2021 clustered data labeled
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2021.iloc[:,6:13].dropna())
df_subset = df2021.dropna()
df_subset["Overall rank"]= range(1,len(df_subset)+1)
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl=sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="Overall rank",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['Overall rank'].between(21,129)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2021 data')
data = df_subset[~df_subset['Overall rank'].between(21,129)]
for I,row in data.iterrows():
     pl.text(row["tsne-2d-one"]+0.2, row["tsne-2d-two"],row["Country name"], horizontalalignment='left', 
     size='medium', color='black', weight='semibold')
pl

#2022 clustered data
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2022.iloc[:,6:12].dropna())
df_subset = df2022.dropna()
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="RANK",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['RANK'].between(21,126)]
    #legend="full",
    #alpha=0.3
).set(title='2022 data')

#2022 clustered data labeled
from sklearn.manifold import TSNE
tsne = TSNE(n_components=2, verbose=1, perplexity=5, n_iter=300)
tsne_results = tsne.fit_transform(df2022.iloc[:,6:12].dropna())
df_subset = df2022.dropna()
df_subset['tsne-2d-one'] = tsne_results[:,0]
df_subset['tsne-2d-two'] = tsne_results[:,1]
import seaborn as sns
plt.figure(figsize=(16,10))
pl=sns.scatterplot(
    x="tsne-2d-one", y="tsne-2d-two",
    hue="RANK",
    #palette=sns.color_palette("hls", 10),
   data = df_subset[~df_subset['RANK'].between(21,126)]
    #legend="full",
    #alpha=0.3
)
pl.set(title='2022 data')
data = df_subset[~df_subset['RANK'].between(21,126)]
for I,row in data.iterrows():
     pl.text(row["tsne-2d-one"]+0.2, row["tsne-2d-two"],row["Country"], horizontalalignment='left', 
     size='medium', color='black', weight='semibold')
pl